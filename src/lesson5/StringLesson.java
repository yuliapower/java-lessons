package lesson5;

import java.util.Arrays;
import java.util.Scanner;

public class StringLesson {
    public static void main(String[] args) {
//        String s = "Hello";
//        String s2 = "Hello";
//        String a = "Hello";
//        String b = "HellO";
//        System.out.println(b);
//        String b1 = b.toLowerCase();
//        System.out.println(b1);
//        //String - immutable
//        //–û–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ - String pool
//        String s1 = new String("Hello");
//        System.out.println(s.equals(s1)); //—Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
//        System.out.println(s == s1);//—Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏

       // Scanner scanner = new Scanner(System.in);
//        String input = scanner.nextLine();
//        if (input.isEmpty()){ // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//            System.out.println("Cannot empty");
//        }
//        System.out.println(input.length());//
//
//        System.out.println(input.charAt(5)); // –≤—ã–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º
//         String result = input.concat("ghhjhj") + "hfkvf";
//        System.out.println(result);

//        int[] arr = {1,2,3,9,9,10};
//        int[] arr1 = {1,2,3,9,9,9,10};
//
//
//        System.out.println(Arrays.compare(arr,arr1));
//
//
//        int[] newArr = Arrays.copyOf(arr,2);
//        int[] newArr1 = Arrays.copyOfRange(arr,0,1);
//        System.out.println(Arrays.toString(newArr));
//        System.out.println(Arrays.toString(newArr1));
//
//
//        System.out.println(Arrays.mismatch(arr,arr1));

//char (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö) 16 –±–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª Unicode
        //–æ—Ç 0 –¥–æ 65536 / '\u0000' –¥–æ '\uffff'
        char char1 = 'J'; //–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        char char2 = 74; //–Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã unicode
        char char3 = '\u0044'; //16—Ç–∏—Ä–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ escape
        System.out.print(char1); //J
        System.out.print(char2); //J
        System.out.print(char3); //D
        System.out.println("\n–°—Ç—Ä–æ–∫–∏"); //–ø–µ—Ä–µ–Ω–æ—Å \n

//–°—Ç—Ä–æ–∫–∞ - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
        // –°—Ç—Ä–æ–∫–∞ - —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø, —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ String
        // 1. —Å—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        // 2. new String - –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        // –°—Ç—Ä–æ–∫–∏ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã, –º–æ–∂–Ω–æ –ª–∏—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        //
        System.out.println("–°—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª".length());

char[] chars = {'\u004A', '\u004A', '\u0044'};
String jjdString = new String(chars);
        System.out.println(jjdString); //JJD
        System.out.println(jjdString.length()); //–≤–µ—Ä–Ω–µ—Ç –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ (3)

        char[] chars1 = {'\uD83D','\uDC38'}; //—Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–∞—è –ø–∞—Ä–∞ —á–∞—Ä–æ–≤
        String frogString = new String(chars1);
        System.out.println(frogString); //üê∏
        System.out.println(frogString.length()); //2
        System.out.println(frogString.codePoints().count()); //1 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–æ JAVA 9: –º–∞—Å—Å–∏–≤ char[] –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-16
        //–∫–∞–∂–¥—ã–π —á–∞—Ä –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–≤—É–º—è –±–∞–π—Ç–∞–º–∏

        // –Ω–∞—á–∏–Ω–∞—è —Å 9 –≤–µ—Ä—Å–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ –º–∞—Å—Å–∏–≤ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
        // byte[] + –∫–æ–¥–∏—Ä–æ–≤–∫–∞ LATIN1 –∏–ª–∏ UTF16

        // –ü—É–ª —Å—Ç—Ä–æ–∫ - –Ω–∞–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫. –•—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞
        // –ü—É–ª —Å—Ç—Ä–æ–∫: "–°—Ç—Ä–æ–∫–∞"

        String string1 = "–°—Ç—Ä–æ–∫–∞"; //–≤ –ø–∞–º—è—Ç–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –∞ —Å—Ç—Ä–∏–Ω–≥1 –∏ —Å—Ç—Ä–∏–Ω–≥2 —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
        String string2 = "–°—Ç—Ä–æ–∫–∞";
        String string3 = new String("–°—Ç—Ä–æ–∫–∞"); //—Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç.–Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø—É–ª–µ/heap –ø–∞–º—è—Ç—å - –∫—É—á–∞
        System.out.println(string1==string2); //true
        System.out.println(string1==string3); //false

        String internString = string3.intern();  //–∏–Ω—Ç–µ—Ä–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—É–ª–µ —Å–º–æ—Ç—Ä–∏—Ç –µ—Å—Ç—å —Ç–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –Ω–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –ø—É–ª–∞
        System.out.println(internString); //–æ—Ç–≤–µ—Ç - —Å—Ç—Ä–æ–∫–∞

        // == —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—ã
        System.out.println(string1.equals(string2)); //true —Ä–∞–≤–Ω—ã
        System.out.println("–°—Ç—Ä–æ–∫–∞".equals(string2)); //true
        System.out.println("c—Ç—Ä–æ–∫–∞".equalsIgnoreCase(string2)); //true

        //string2 = null;
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string2)); //false . –ø—Ä–∏ –Ω–∞–ª–µ –Ω–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∏
        System.out.println(string2.equals("—Å—Ç—Ä–æ–∫–∞")); //false. –ø—Ä–∏ null –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞

        //System.out.println(string2 == null); //true –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –Ω—É–ª—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω–æ–µ —Ä–∞–≤–Ω–æ
        //System.out.println(string2!=null); //false

        string1 = "Java";
        string2 = "Python";

        //–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
        String concatString = string1 + " :: " + string2;
        System.out.println(concatString);

        concatString = string1.concat(" :: ").concat(string2); //Java :: Python

        concatString = String.join(" :: ", string1,string2); //Java :: Python
        concatString = String.join(" :: ", string1,string2, string3); //Java :: Python :: –°—Ç—Ä–æ–∫–∞
        System.out.println(concatString);
        concatString = "";
        for (int i = 0; i < 10; i++) {
            concatString+=i+ " "; //0 1 2 3 4 5 6 7 8 9

        }
        System.out.println(concatString);
        // StringBuilder - —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –±–∞—Ñ–µ—Ä
       // StringBuffer - –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π - –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö

        concatString = "–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏";
        StringBuilder sb = new StringBuilder(concatString);
        sb.append(string1).append(" :: ").append(string2); //–ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏Java :: Python
        System.out.println(sb);

        StringBuilder sb2 = new StringBuilder();
        for (int i = 0; i < 10; i+=1) {
            sb2.append(i).append(" ");
        }
        System.out.println(sb2);
        String sbString = sb2.toString(); //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ—á–∫—É –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∫–æ–ø–∏–ª –±–∏–ª–¥–µ—Ä
        System.out.println(sbString);

        //–º–µ—Ç–æ–¥ split()
        String langs = "Java, Python, JavaScript";
        String[] langArr = langs.split(", ");
        System.out.println(Arrays.toString(langArr)); //[Java, Python, JavaScript]
        // –º–µ—Ç–æ–¥—ã –∑–∞–º–µ–Ω—ã
        String newString = langs.replaceAll(", ", " - "); //–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        System.out.println(newString); //Java - Python - JavaScript

        newString = langs.replaceFirst(", ", " - "); //—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—è–µ—Ç
        System.out.println(newString); //Java - Python, JavaScript

        newString = langs.replace(", ", " - "); //–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        System.out.println(newString);

        System.out.println(langs.contains("th")); // true
        System.out.println(langs.startsWith("j")); //false –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —ç—Ç–æ–≥–æ
        System.out.println(langs.endsWith("Script")); //true –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —ç—Ç–∏–º
        System.out.println(langs.startsWith("a", 1)); //true
    }

}
